import React, {useEffect, useContext} from 'react'
import {Link} from "react-router-dom";

import Loading from 'components/loading'
import ErrorMessage from 'components/errorMessage'
import TagList from 'components/tagList'
import useFetch from "hooks/useFetch";
import {CurrentUserContext} from 'contexts/currentUser'

const Article = (props) => {
    const slug = props.match.params.slug
    const apiUrl = `/articles/${slug}`
    const [{response, isLoading, error}, doFetch] = useFetch(apiUrl)
    const [currentUserState] = useContext(CurrentUserContext)

    const isAuthor = () => {
        if (!response || !currentUserState.isLoggedIn) {
            return false
        }
        return (
            response.article.author.username === currentUserState.currentUser.username
        )
    }

    console.log('isAuthor', isAuthor())
    console.log('response', response)

    useEffect(() => {
        doFetch()
    }, [doFetch])

    //console.log('resp', response)

    return (
        <div className='article-page'>
            <div className='banner'>
                {!isLoading && response && (
                    <div className='container'>
                        <h1>{response.article.title}</h1>
                        <div className='article-meta'>
                            <Link to={`/profile/${response.article.author.username}`}>
                                <img
                                    src={response.article.author.image}
                                    alt=''
                                />
                            </Link>
                            <div className='info'>
                                <Link to={`/profile/${response.article.author.username}`}>
                                    {response.article.author.username}
                                </Link>
                                <span className='date'>{response.article.createdAt}</span>
                            </div>
                        </div>
                    </div>
                )}
            </div>
            <div className='container page'>
                {isLoading && <Loading/>}
                {error && <ErrorMessage/>}
                {!isLoading && response && (
                    <div className='row article-content'>
                        <div className='col-xs-12'>
                            <div>
                                <p>{response.article.body}</p>
                            </div>
                            <TagList tags={response.article.tagList}/>
                        </div>
                    </div>
                )}
            </div>
        </div>
    )
}

export default Article